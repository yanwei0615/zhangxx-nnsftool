package com.yanwei.zhangxx;import com.yanwei.zhangxx.dialog.LogMonitor;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.apache.http.HttpEntity;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.util.EntityUtils;import org.apache.poi.ss.usermodel.CellStyle;import org.apache.poi.ss.usermodel.FillPatternType;import org.apache.poi.ss.usermodel.HorizontalAlignment;import org.apache.poi.ss.usermodel.IndexedColors;import org.apache.poi.xssf.usermodel.XSSFCell;import org.apache.poi.xssf.usermodel.XSSFCellStyle;import org.apache.poi.xssf.usermodel.XSSFRow;import org.apache.poi.xssf.usermodel.XSSFSheet;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import org.jsoup.Jsoup;import org.jsoup.nodes.Document;import org.jsoup.select.Elements;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.util.Arrays;import java.util.HashSet;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.Set;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * 获取论文涉及的国家自然科学基金信息 */public class NationalNaturalScienceFoundation {    private static int ROW_COUNT = 0;    private static String KEY_WORDS_WITHOUT_BLANK = "National Natural Science Foundation of China".replace(" ", "");    private static XSSFWorkbook workbook = new XSSFWorkbook(); // 创建一个excel    private static CellStyle styleOrange = workbook.createCellStyle();    private static CellStyle styleYellow = workbook.createCellStyle();    private static CellStyle styleRed = workbook.createCellStyle();    private static String excelName = "/Users/yanwei/Desktop/欣欣作业/文献分类表 江振华-处理后.xlsx";    private static String originFilePath = "/Users/yanwei/Desktop/欣欣作业/文献分类表 江振华.xlsx";    public static void generateNnsf(String originFilePath, String excelName) throws Exception {        LogMonitor.addLog("开始分析...");        if (StringUtils.isNotBlank(originFilePath)) {            NationalNaturalScienceFoundation.originFilePath = originFilePath;        }        if (StringUtils.isNotBlank(excelName)) {            NationalNaturalScienceFoundation.excelName = excelName;        }        XSSFSheet sheet = initExcel(workbook);        getFoundationInfo(sheet);        outputToExcelFile(workbook);    }    /**     * 初始化Excel表格     *     * @param workbook Excel表格对象     * @return 返回表格的sheet页对象     */    private static XSSFSheet initExcel(XSSFWorkbook workbook) {        LogMonitor.addLog("初始化Excel表头信息");        if (workbook.getSheet("国家自然科学基金分析") != null) {            workbook.removeSheetAt(0);        }        XSSFSheet sheet = workbook.createSheet("国家自然科学基金分析");// 新建sheet页        XSSFCellStyle cellStyle = workbook.createCellStyle(); // 新建单元格样式        cellStyle.setFillForegroundColor((short) 13);// 设置背景色        cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);        cellStyle.setAlignment(HorizontalAlignment.CENTER); // 居中        cellStyle.setWrapText(true);// 设置自动换行        // 橙色背景        styleOrange.setFillForegroundColor(IndexedColors.ORANGE.getIndex());        styleOrange.setFillPattern(FillPatternType.SOLID_FOREGROUND);        // 黄色背景        styleYellow.setFillForegroundColor(IndexedColors.YELLOW.getIndex());        styleYellow.setFillPattern(FillPatternType.SOLID_FOREGROUND);        // 红色背景        styleRed.setFillForegroundColor(IndexedColors.RED.getIndex());        styleRed.setFillPattern(FillPatternType.SOLID_FOREGROUND);        // 生成表头        List<String> titles = Arrays.asList("标题", "新类别", "姓名", "单位", "资助金额(万元)", "编号", "项目类型", "科学部", "资助年份", "题目", "学科分类", "学科代码", "执行时间");        XSSFRow titleRow = sheet.createRow(ROW_COUNT++);        for (int i = 0; i < titles.size(); i++) {            titleRow.createCell(i).setCellValue(titles.get(i));        }        return sheet;    }    /**     * 获取基金信息     *     * @param sheet sheet页对象     * @throws Exception 异常     */    private static void getFoundationInfo(XSSFSheet sheet) throws Exception {        Map<String, Set<String>> projectCodes = getProjectCodesFromExcel();        for (Map.Entry<String, Set<String>> entry : projectCodes.entrySet()) {            String key = entry.getKey();            Set<String> values = entry.getValue();            LogMonitor.addLog("--------" + key + " start--------");            // 如果values为null，说明不包含国家自然科学基金关键字            if (values == null) {                cannotFindKeyWords(sheet, key);                continue;            }            // 如果values为空，则说明虽然包含了国科金的关键字，但没找到对应的基金编码            if (CollectionUtils.isEmpty(values)) {                cannotGetFoundationInfo(sheet, key);                continue;            }            for (String projectCode : values) {                getOneFoundationInfoByProjectCode(sheet, projectCode, key);            }            LogMonitor.addLog("--------" + key + " end--------");        }    }    /**     * 资助项目中不包含国家自然科学基金的描述     *     * @param sheet        sheet页     * @param articleTitle 论文标题     */    private static void cannotFindKeyWords(XSSFSheet sheet, String articleTitle) {        LogMonitor.addLog(articleTitle + ": 资助项目中不包含国家自然科学基金的描述");        // 新生成一行数据        XSSFRow newRow = sheet.createRow(ROW_COUNT++);        newRow.createCell(0).setCellValue(articleTitle);        newRow.getCell(0).setCellStyle(styleYellow);        newRow.createCell(1).setCellValue("资助项目中不包含国家自然科学基金的描述");    }    /**     * 资助项目中包含国家自然科学基金的描述，但不包含基金编码信息     *     * @param sheet        sheet页     * @param articleTitle 论文标题     */    private static void cannotGetFoundationInfo(XSSFSheet sheet, String articleTitle) {        LogMonitor.addLog(articleTitle + "：资助项目中包含国家自然科学基金的描述，但不包含基金编码信息");        // 新生成一行数据        XSSFRow newRow = sheet.createRow(ROW_COUNT++);        newRow.createCell(0).setCellValue(articleTitle);        newRow.getCell(0).setCellStyle(styleOrange);        newRow.createCell(1).setCellValue("资助项目中包含国家自然科学基金的描述，但不包含基金编码信息");    }    /**     * 从原始的Excel表格中获取所有涉及的基金编码     *     * @return 每篇论文的基金编码     * @throws IOException 异常     */    private static Map<String, Set<String>> getProjectCodesFromExcel() throws IOException {        LogMonitor.addLog("从原始Excel文件中读取资助项目信息，并抽取每篇文章涉及的国家自然科学基金的基金号");        File originalFile = new File(originFilePath);        if (!originalFile.exists()) {            System.out.println("Original file does not exist: " + originFilePath);            LogMonitor.addLog("原始Excel文件不存在，请检查文件路径是否正确：" + originFilePath);            throw new IOException("Original file does not exist: " + originFilePath);        }        Map<String, Set<String>> projectCodes = new LinkedHashMap<>();        //1.读取Excel文档对象        XSSFWorkbook hssfWorkbook = new XSSFWorkbook(new FileInputStream(originFilePath));        //2.获取要解析的表格（第一个表格）        XSSFSheet sheet = hssfWorkbook.getSheetAt(0);        //获得最后一行的行号        int lastRowNum = sheet.getLastRowNum();        int includeKeyWordsCount = 0;        int notIncludeKeyWordsCount = 0;        System.out.println("total lines: " + (lastRowNum - 1));        LogMonitor.addLog("原始文件总行数：" + (lastRowNum - 1));        LogMonitor.addLog("要查找的关键字：" + KEY_WORDS_WITHOUT_BLANK);        for (int i = 1; i <= lastRowNum; i++) {//遍历每一行            //3.获得要解析的行            XSSFRow row = sheet.getRow(i);            //4.获得要解析的列信息            XSSFCell title = row.getCell(4);            String articleTitle = "";            if (title != null && i != 650) {                articleTitle = title.getStringCellValue();                System.out.println(i + ": " + articleTitle);            }            if (i == 650) {                articleTitle = "这个题目是空的，需要自己补充一下";            }            // 资助项目1            XSSFCell supportProject1 = row.getCell(6);            String articleSupportProject1 = "";            if (supportProject1 != null) {                articleSupportProject1 = supportProject1.getStringCellValue();            }            // 资助项目2            XSSFCell supportProject2 = row.getCell(7);            String articleSupportProject2 = "";            if (supportProject2 != null) {                articleSupportProject2 = supportProject2.getStringCellValue();            }            if (articleSupportProject1.toUpperCase().replaceAll(" ", "").contains(KEY_WORDS_WITHOUT_BLANK.toUpperCase()) ||                    articleSupportProject2.toUpperCase().replaceAll(" ", "").contains(KEY_WORDS_WITHOUT_BLANK.toUpperCase())) {                includeKeyWordsCount++;                projectCodes.put(articleTitle, getProjectCodesFromSupportDes(articleSupportProject1, articleSupportProject2));            } else {                notIncludeKeyWordsCount++;                // 不包含国家自然科学基金关键字时                projectCodes.put(articleTitle, null);            }        }        System.out.println("lines including key words = " + includeKeyWordsCount);        LogMonitor.addLog("包含关键字的行数：" + includeKeyWordsCount);        LogMonitor.addLog("不包含关键字的行数：" + notIncludeKeyWordsCount);        return projectCodes;    }    /**     * 从资助项目的描述信息中，获取国家自然科学基金编码，目前只使用了描述1的信息     *     * @param supportProject1 资助项目1的描述信息     * @param supportProject2 资助项目2的描述信息     * @return 关联的自然科学基金编码集     */    private static Set<String> getProjectCodesFromSupportDes(String supportProject1, String supportProject2) {        Set<String> result = new HashSet<>();        Pattern pattern = Pattern.compile("(" + KEY_WORDS_WITHOUT_BLANK + "\\[)([\\d,]+)(\\])");        Matcher m = pattern.matcher(supportProject1.replaceAll(" ", ""));        if (m.find()) {            String projectCodes = m.group(2);            for (String projectCode : projectCodes.split(",")) {                if (StringUtils.isNotBlank(projectCode)) {                    result.add(projectCode);                }            }        }        return result;    }    /**     * 根据基金工程编号获取单个基金的信息     *     * @param sheet       sheet页对象     * @param projectCode 工程编号（基金编号）     * @throws IOException 异常     */    private static void getOneFoundationInfoByProjectCode(XSSFSheet sheet, String projectCode, String articleTitle) throws IOException {        // 新生成一行数据        XSSFRow newRow = sheet.createRow(ROW_COUNT++);        newRow.createCell(0).setCellValue(articleTitle);        // 列计数        int columnCount = 2;        CloseableHttpClient httpclient = HttpClients.createDefault();        HttpGet httpGet = new HttpGet("http://www.letpub.com.cn/?page=grant&startTime=1997&endTime=2019&no=" + projectCode);        CloseableHttpResponse response = httpclient.execute(httpGet);        try {            int retCode = response.getStatusLine().getStatusCode();            if (retCode != 200) {                System.out.println("访问网站错误，返回码: " + retCode);                LogMonitor.addLog(projectCode + "访问网站错误，返回码: " + retCode);                return;            }            HttpEntity entity = response.getEntity();            String htmlInfos = EntityUtils.toString(entity);            Document document = Jsoup.parse(htmlInfos);            // 负责人	单位	金额 (万)	项目编号	项目类型	所属学部	批准年份            Elements baseInfoLines = document.select("table[class=table_yjfx]").select("tr[style=background:#EFEFEF;]");            if (baseInfoLines.size() == 0) {                newRow.getCell(0).setCellStyle(styleRed);                newRow.createCell(1).setCellValue("网站上搜索不到基金信息");                newRow.createCell(5).setCellValue(projectCode);                LogMonitor.addLog(projectCode + "网站上搜索不到基金信息");                return;            }            LogMonitor.addLog(projectCode + "详细信息如下：");            Elements baseInfoColumns = baseInfoLines.get(0).select("td");            for (int j = 0; j < baseInfoColumns.size(); j++) {                String texts = baseInfoColumns.get(j).text();                System.out.println(texts);                LogMonitor.addLog(texts);                newRow.createCell(columnCount++).setCellValue(texts);            }            // 获取 题目 学科分类 学科代码 执行时间            Elements extraInfoLines = document.select("table[class=table_yjfx]").select("tr").select("td[colspan=6]");            for (int j = 0; j < extraInfoLines.size(); j++) {                String texts = extraInfoLines.get(j).text();                System.out.println(texts);                LogMonitor.addLog(texts);                newRow.createCell(columnCount++).setCellValue(texts);            }            // 确保响应头完成响应            EntityUtils.consume(entity);        } finally {            response.close();        }    }    /**     * 将Excel内容输出到文件     *     * @param workbook Excel对象     */    private static void outputToExcelFile(XSSFWorkbook workbook) {        // 输出到本地        if (new File(excelName).exists()) {            new File(excelName).delete();        }        FileOutputStream out = null;        try {            out = new FileOutputStream(excelName);            workbook.write(out);            out.flush();            out.close();            workbook.close();        } catch (Exception e) {            e.printStackTrace();        } finally {            if (out != null)                try {                    out.close();                } catch (IOException e) {                    e.printStackTrace();                }            out = null;            System.out.println("分析完成");            LogMonitor.addLog("分析完成。");        }    }}